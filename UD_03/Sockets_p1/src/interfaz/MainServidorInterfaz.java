package interfaz;

import java.net.DatagramSocket;
import javax.swing.SwingUtilities;
import sockets.ServidorUDP;

public class MainServidorInterfaz extends javax.swing.JFrame {

    /**
     * Creates new form MainServidorInterfaz
     */
    public MainServidorInterfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btn_start = new javax.swing.JButton();
        puerto_local = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        btn_close = new javax.swing.JButton();
        text_msg = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        output_txt = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_start.setText("Iniciar");
        btn_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_startActionPerformed(evt);
            }
        });
        jPanel1.add(btn_start, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, -1, -1));

        puerto_local.setValue(12345);
        jPanel1.add(puerto_local, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 90, -1));

        jLabel1.setText("Puerto local:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 90, -1));

        btn_close.setEnabled(false);
        btn_close.setText("Cerrar servidor");
        btn_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeActionPerformed(evt);
            }
        });
        jPanel1.add(btn_close, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, -1, -1));

        text_msg.setEditable(false);
        text_msg.setFocusable(false);
        text_msg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_msgActionPerformed(evt);
            }
        });
        jPanel1.add(text_msg, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 350, -1));

        output_txt.setColumns(20);
        output_txt.setEditable(false);
        output_txt.setFocusable(false);
        output_txt.setRows(5);
        jScrollPane1.setViewportView(output_txt);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 350, 160));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ServidorUDP servidor = new ServidorUDP(); //importacion de funciones del socket servidor
    Thread hiloServidor = null; //declaración del hilo que manejará el socketServidor
    DatagramSocket socket = null; //declaración del socket para poder finalizarlo cuando queramos

    /**
     * Botón que al pulsarlo inicializa el socket del lado servidor
     *
     * @param evt action del usuario Al pulsar el botón, se cambian los estados
     * "enabled" de los botones para impedir que se re-cree el servidor
     *
     * Si los parámetros para iniciar el servidor son correctos, y la función
     * initServidor devuelve un objeto DatagramSocket válido Se lanzará un
     * mensaje de éxito, y se iniciará un hilo que contendrá el servidor en
     * escucha hasta que un dato entre, o se cierre el servidor.
     *
     * Una vez finalizado, se reestablecerán la posición de los botones para
     * reiniciar el servidor.
     */
    private void btn_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_startActionPerformed
        // TODO add your handling code here:
        //Se bloquea el botón para que no se le pueda volver a dar:
        btn_start.setEnabled(false);
        //Se bloquea el spinner del puerto (aunque lo cambie no afecta, pero queda mejor así)
        puerto_local.setEnabled(false);
        //Se activa el botón para cancelar:
        btn_close.setEnabled(true);
        int puerto = (Integer) puerto_local.getValue();
        //Se establece el socket anterior
        socket = servidor.initServidorUDP(puerto);

        if (socket != null) {
            text_msg.setText("Servidor lanzado con éxito en el puerto: " + puerto);
            output_txt.setText("Servidor a la escucha...");
            //Para evitar bloqueo del codigo, se crea un hilo que estará a la espera de que se reciban datos

            hiloServidor = new Thread(new Runnable() {
                public void run() {
                    final String output = servidor.listenServidorUDP(socket);
                    //Para actualizar interfaz visual debe de hacerse desde el hilo de despacho de eventos
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            puerto_local.setEnabled(true);
                            output_txt.setText(output);
                            btn_start.setEnabled(true);
                            btn_close.setEnabled(false);
                        }
                    });
                }
            });
            hiloServidor.start(); //se inicia el hilo

        } else {
            text_msg.setText("Ha ocurrido un error!");
            System.out.println("Ha ocurrido un error");
        }


    }//GEN-LAST:event_btn_startActionPerformed

    private void text_msgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_msgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_msgActionPerformed

    
    /**
     * Cierra el socket del servidor y finaliza su hilo de ejecución.
     * @param evt action del usuario
     * 
     * Cierra el socket del servidor y finaliza el hilo que lo ejecuta.
     * Muestra un mensaje por la interfaz informando que el servidor está cerrado
     * 
     * Posiciona los botones de inici/fin en su posición por defecto
     */
    private void btn_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeActionPerformed
        // TODO add your handling code here:
        if (hiloServidor != null) {
            socket.close();
            hiloServidor.interrupt();
            hiloServidor = null;
            text_msg.setText("Servidor detenido.");
        }
        btn_close.setEnabled(false);
        btn_start.setEnabled(true);
        puerto_local.setEnabled(true);

    }//GEN-LAST:event_btn_closeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainServidorInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainServidorInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainServidorInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainServidorInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainServidorInterfaz().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_close;
    private javax.swing.JButton btn_start;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea output_txt;
    private javax.swing.JSpinner puerto_local;
    private javax.swing.JTextField text_msg;
    // End of variables declaration//GEN-END:variables

}
